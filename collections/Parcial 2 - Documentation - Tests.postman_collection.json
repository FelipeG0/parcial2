{
	"info": {
		"_postman_id": "e0ed3e16-6cb5-4e0a-ae2a-71e8f5ddae8d",
		"name": "Parcial 2 - Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29354277"
	},
	"item": [
		{
			"name": "Usuario",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.globals.set(\"user_id\", data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"nCedula\": 123456789,\n   \"nombre\": \"Juan Pérez\",\n   \"grupoInvestigacion\": \"TICSW\",\n   \"nExtension\": 12345678,\n   \"rol\": \"Profesor\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/usuarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "201 Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"nCedula\": 123456789,\n   \"nombre\": \"Juan Pérez\",\n   \"grupoInvestigacion\": \"TICSW\",\n   \"nExtension\": 12345678,\n   \"rol\": \"Profesor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/usuarios",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"id\": 1,\n   \"nCedula\": 123456789,\n   \"nombre\": \"Juan Pérez\",\n   \"grupoInvestigacion\": \"TICSW\",\n   \"nExtension\": 12345678,\n   \"rol\": \"Profesor\",\n   \"jefe\": null,\n   \"bonos\": [],\n   \"clases\": []\n}"
						},
						{
							"name": "Create user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"nCedula\": 123456789,\n   \"nombre\": \"Juan Pérez\",\n   \"grupoInvestigacion\": \"TICSW\",\n   \"nExtension\": 12345678,\n   \"rol\": \"Profesor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/usuarios",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"nCedula\": 123456789,\n    \"nombre\": \"Juan Pérez\",\n    \"grupoInvestigacion\": \"TICSW\",\n    \"nExtension\": 12345678,\n    \"rol\": \"Profesor\",\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "Create user with invalid group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message matches\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.eql(\"Grupo de investigación inválido para profesores\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"nCedula\": 123456789,\n   \"nombre\": \"Maria Gómez\",\n   \"grupoInvestigacion\": \"INVALID_GROUP\",\n   \"nExtension\": 1212133123,\n   \"rol\": \"Profesor\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/usuarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "400 Bad Request - Invalid group",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"nCedula\": 123456789,\n   \"nombre\": \"Maria Gómez\",\n   \"grupoInvestigacion\": \"INVALID_GROUP\",\n   \"nExtension\": 1212133123,\n   \"rol\": \"Profesor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/usuarios",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"statusCode\": 400,\n   \"message\": \"Grupo de investigación inválido para profesores\"\n}"
						}
					]
				},
				{
					"name": "Create decana with invalid extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message matches\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.eql(\"El numero de extension debe tener 8 digitos\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"nCedula\": 987654321,\n   \"nombre\": \"Ana López\",\n   \"grupoInvestigacion\": \"IMAGINE\",\n   \"nExtension\": 12345,\n   \"rol\": \"Decana\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/usuarios",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "400 Bad Request - Invalid extension",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"nCedula\": 987654321,\n   \"nombre\": \"Ana López\",\n   \"grupoInvestigacion\": \"IMAGINE\",\n   \"nExtension\": 12345,\n   \"rol\": \"Decana\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/usuarios",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"statusCode\": 400,\n   \"message\": \"El numero de extension debe tener 8 digitos\"\n}"
						}
					]
				},
				{
					"name": "Get one user ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user details\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property(\"nombre\");\r",
									"    pm.expect(data).to.have.property(\"rol\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/usuarios/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"usuarios",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/usuarios/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"usuarios",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"id\": 1,\n   \"nCedula\": 123456789,\n   \"nombre\": \"Juan Pérez\",\n   \"grupoInvestigacion\": \"TICSW\",\n   \"nExtension\": 12345678,\n   \"rol\": \"Profesor\",\n   \"jefe\": null,\n   \"bonos\": [],\n   \"clases\": []\n}"
						}
					]
				},
				{
					"name": "Get an invalid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message matches\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.eql(\"The user with the given id was not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/usuarios/000000000000000\n",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"usuarios",
								"000000000000000\n"
							]
						}
					},
					"response": [
						{
							"name": "404 Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/usuarios/000000000000000\n",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"usuarios",
										"000000000000000\n"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"statusCode\": 404,\n   \"message\": \"The user with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/usuarios/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"usuarios",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "204 No Content",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/usuarios/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"usuarios",
										"1"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete an invalid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message matches\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.eql(\"The user with the given id was not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/usuarios/000000000000000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"usuarios",
								"000000000000000"
							]
						}
					},
					"response": [
						{
							"name": "404 Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/usuarios/000000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"usuarios",
										"000000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"statusCode\": 404,\n   \"message\": \"The user with the given id was not found\"\n}"
						}
					]
				},
				{
					"name": "Delete a user with constrains ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message matches\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.eql(\"No se puede eliminar un usuario Decana o con bonos\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/usuarios/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"usuarios",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "400 Bad Request - Cannot delete Decana or with bonos",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/usuarios/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"usuarios",
										"1"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"statusCode\": 400,\n   \"message\": \"No se puede eliminar un usuario Decana o con bonos\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Clase",
			"item": [
				{
					"name": "Create a class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.globals.set(\"class_id\", data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all expected properties\", function () {\r",
									"    pm.expect(data).to.have.property(\"nombre\");\r",
									"    pm.expect(data).to.have.property(\"codigo\");\r",
									"    pm.expect(data).to.have.property(\"nCreditos\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"nombre\": \"Programación Avanzada\",\n   \"codigo\": \"1234567890\",\n   \"nCreditos\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/clases",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"clases"
							]
						}
					},
					"response": [
						{
							"name": "201 Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"nombre\": \"Programación Avanzada\",\n   \"codigo\": \"1234567890\",\n   \"nCreditos\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/clases",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"clases"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"id\": 1,\n   \"nombre\": \"Programación Avanzada\",\n   \"codigo\": \"PROG101\",\n   \"nCreditos\": 3,\n   \"bonos\": [],\n   \"usuario\": null\n}"
						}
					]
				},
				{
					"name": "Get one class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains class details\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property(\"nombre\");\r",
									"    pm.expect(data).to.have.property(\"codigo\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/clases/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"clases",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/clases/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"clases",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"id\": 1,\n   \"nombre\": \"Programación Avanzada\",\n   \"codigo\": \"PROG101\",\n   \"nCreditos\": 3,\n   \"bonos\": [],\n   \"usuario\": null\n}"
						}
					]
				},
				{
					"name": "Get an invalid class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message matches\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.eql(\"The class with the given id was not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/clases/000000000000000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"clases",
								"000000000000000"
							]
						}
					},
					"response": [
						{
							"name": "404 Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/clases/000000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"clases",
										"000000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"statusCode\": 404,\n   \"message\": \"The class with the given id was not found\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Bono",
			"item": [
				{
					"name": "Create a Bono",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json();\r",
									"pm.globals.set(\"bono_id\", data.id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains all expected properties\", function () {\r",
									"    pm.expect(data).to.have.property(\"monto\");\r",
									"    pm.expect(data).to.have.property(\"calificacion\");\r",
									"    pm.expect(data).to.have.property(\"palabraClave\");\r",
									"    pm.expect(data).to.have.property(\"usuario\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"monto\": 5000,\n   \"calificacion\": 5.5,\n   \"palabraClave\": \"excelencia\",\n   \"usuarioId\" : 1,\n   \"codigoClase\" : \"1234567890\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/bonos",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"bonos"
							]
						},
						"description": "Crea un nuevo bono con los atributos proporcionados."
					},
					"response": [
						{
							"name": "201 Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"monto\": 5000,\n   \"calificacion\": 3.5,\n   \"palabraClave\": \"excelencia\",\n   \"usuarioId\" : 1,\n   \"codigoClase\" : \"1234567890\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/bonos",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"bonos"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"monto\": 5000,\n    \"calificacion\": 3.5,\n    \"palabraClave\": \"excelencia\",\n    \"usuario\": {\n        \"id\": 1,\n        \"nCedula\": 123456789,\n        \"nombre\": \"Juan Pérez\",\n        \"grupoInvestigacion\": \"TICSW\",\n        \"nExtension\": 12345678,\n        \"rol\": \"Profesor\"\n    },\n    \"clase\": {\n        \"id\": 1,\n        \"nombre\": \"Programación Avanzada\",\n        \"codigo\": \"1234567890\",\n        \"nCreditos\": 3\n    },\n    \"id\": 1\n}"
						}
					]
				},
				{
					"name": "Get a bonus by class code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains bono details\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.have.property(\"id\");\r",
									"    pm.expect(data).to.have.property(\"monto\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/bonos/clase/1234567890",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"bonos",
								"clase",
								"1234567890"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/bonos/clase/1234567890",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"bonos",
										"clase",
										"1234567890"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"id\": 1,\n    \"monto\": 5000,\n    \"calificacion\": \"3.5\",\n    \"palabraClave\": \"excelencia\"\n}"
						}
					]
				},
				{
					"name": "Get an invalid bonus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message matches\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.eql(\"clase no encontrado.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/bonos/clase/000000000000000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"bonos",
								"clase",
								"000000000000000"
							]
						}
					},
					"response": [
						{
							"name": "404 Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/bonos/clase/000000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"bonos",
										"clase",
										"000000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"statusCode\": 404,\n   \"message\": \"clase no encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Find All Bonos by User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.be.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/bonos/usuario/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"bonos",
								"usuario",
								"1"
							]
						},
						"description": "Obtiene todos los bonos asociados a un usuario específico."
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/bonos/usuario/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"bonos",
										"usuario",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"monto\": 5000,\n        \"calificacion\": \"3.5\",\n        \"palabraClave\": \"excelencia\"\n    }\n]"
						}
					]
				},
				{
					"name": "Delete a bonus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/bonos/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"bonos",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "204 No Content",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/bonos/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"bonos",
										"1"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete an invalid bonus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message matches\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.eql(\"Bono no encontrado.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/bonos/000000000000000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"bonos",
								"000000000000000"
							]
						}
					},
					"response": [
						{
							"name": "404 Not Found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/bonos/000000000000000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"bonos",
										"000000000000000"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"statusCode\": 404,\n   \"message\": \"Bono no encontrado.\"\n}"
						}
					]
				},
				{
					"name": "Delete a bonus with constrains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 412\", function () {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message matches\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.message).to.eql(\"No se puede eliminar un bono con calificación mayor a 4.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/bonos/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"bonos",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "412 Precondition Failed",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/bonos/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"bonos",
										"1"
									]
								}
							},
							"status": "Precondition Failed",
							"code": 412,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n   \"statusCode\": 412,\n   \"message\": \"No se puede eliminar un bono con calificación mayor a 4.\"\n}"
						}
					]
				}
			]
		}
	]
}